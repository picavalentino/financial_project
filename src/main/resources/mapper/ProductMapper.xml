<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE  mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team.financial_project.mapper.ProductMapper">
    <resultMap id="ProductResultMap" type="com.team.financial_project.dto.ProductDTO">
        <!-- ProductDTO 기본 필드 -->
        <id property="prodSn" column="prod_sn" />
        <result property="prodNm" column="prod_nm" />
        <result property="prodInstlAmtMin" column="prod_instl_amt_min" />
        <result property="prodInstlAmtMax" column="prod_instl_amt_max" />
        <result property="prodCreateAt" column="prod_create_at" />
        <result property="prodUpdateAt" column="prod_update_at" />
        <result property="userId" column="user_id" />
        <result property="prodCd" column="prod_cd" />
        <result property="prodTyCd" column="prod_ty_cd" />
        <result property="prodSbstgTyCd" column="prod_sbstg_ty_cd" />
        <result property="prodPayTyCd" column="prod_pay_ty_cd" />
        <result property="prodAirMin" column="prod_air_min" />
        <result property="prodAirMax" column="prod_air_max" />
        <result property="prodAirBgnYmd" column="prod_air_bgn_ymd" />
        <result property="prodAirEndYmd" column="prod_air_end_ymd" />
        <result property="prodIntTaxTyCd" column="prod_int_tax_ty_cd" />
        <result property="prodCurrStcd" column="prod_curr_stcd" />
        <result property="prodNtslBgnYmd" column="prod_ntsl_bgn_ymd" />
        <result property="prodNtslEndYmd" column="prod_ntsl_end_ymd" />

        <!-- prodHist 리스트 매핑 -->
        <collection property="histList" ofType="com.team.financial_project.dto.ProdHistDTO">
            <id property="histId" column="hist_id" />
            <result property="userId" column="user_id" />
            <result property="prodSn" column="prod_sn" />
            <result property="prodAirMin" column="hist_prod_air_min" />
            <result property="prodAirMax" column="hist_prod_air_max" />
            <result property="prodAirBgnYmd" column="hist_prod_air_bgn_ymd" />
            <result property="prodAirEndYmd" column="hist_prod_air_end_ymd" />
            <result property="histCreateAt" column="hist_create_at" />
            <result property="histCurrStcd" column="hist_curr_stcd" />
        </collection>
    </resultMap>

    <select id="findAllList" resultType="productDTO">
        SELECT
            p.prod_sn AS prodSn,
            p.prod_nm AS prodNm,
            p.prod_instl_amt_min AS prodInstlAmtMin,
            p.prod_instl_amt_max AS prodInstlAmtMax,
            p.prod_cd AS prodCd,
            p.prod_ty_cd AS prodTyCd,
            p.prod_pay_ty_cd AS prodPayTyCd,
            p.prod_int_tax_ty_cd AS prodIntTaxTyCd,
            p.prod_air_min AS prodAirMin,
            p.prod_air_max AS prodAirMax,
            p.prod_ntsl_bgn_ymd AS prodNtslBgnYmd,
            p.prod_ntsl_end_ymd AS prodNtslEndYmd,
            p.prod_curr_stcd AS prodCurrStcd
        FROM tb_product p
        ORDER BY p.prod_sn DESC;
    </select>

    <select id="getProductById" parameterType="Long" resultType="productDTO">
        SELECT
        p.prod_sn AS prodSn,
        p.prod_nm AS prodNm,
        p.prod_instl_amt_min AS prodInstlAmtMin,
        p.prod_instl_amt_max AS prodInstlAmtMax,
        p.prod_create_at AS prodCreateAt,
        p.prod_update_at AS prodUpdateAt,
        p.user_id AS userId,
        p.prod_cd AS prodCd,
        p.prod_ty_cd AS prodTyCd,
        p.prod_sbstg_ty_cd AS prodSbstgTyCd,
        p.prod_pay_ty_cd AS prodPayTyCd,
        p.prod_int_tax_ty_cd AS prodIntTaxTyCd,
        p.prod_air_min AS prodAirMin,
        p.prod_air_max AS prodAirMax,
        p.prod_air_bgn_ymd AS prodAirBgnYmd,
        p.prod_air_end_ymd AS prodAirEndYmd,
        p.prod_curr_stcd AS prodCurrStcd,
        p.prod_ntsl_bgn_ymd AS prodNtslBgnYmd,
        p.prod_ntsl_end_ymd AS prodNtslEndYmd
        FROM tb_product p
        WHERE p.prod_sn = #{prodSn}
    </select>
    <select id="getProdHistById" parameterType="Long" resultType="prodHistDTO">
        SELECT
        h.hist_id AS histId,
        h.prod_sn AS prodSn,
        h.hist_prod_air_min AS prodAirMin,
        h.hist_prod_air_max AS prodAirMax,
        h.hist_prod_air_bgn_ymd AS prodAirBgnYmd,
        h.hist_prod_air_end_ymd AS prodAirEndYmd,
        h.hist_create_at AS histCreateAt,
        h.hist_curr_stcd AS histCurrStcd
        FROM tb_prod_hist h
        WHERE h.prod_sn = #{prodSn}
    </select>

    <!-- 조건 검색 -->
    <select id="searchProducts" parameterType="map" resultType="productDTO">
        SELECT
            p.prod_sn AS prodSn,
            p.prod_nm AS prodNm,
            p.prod_instl_amt_min AS prodInstlAmtMin,
            p.prod_instl_amt_max AS prodInstlAmtMax,
            p.prod_cd AS prodCd,
            p.prod_ty_cd AS prodTyCd,
            p.prod_pay_ty_cd AS prodPayTyCd,
            p.prod_int_tax_ty_cd AS prodIntTaxTyCd,
            p.prod_air_min AS prodAirMin,
            p.prod_air_max AS prodAirMax,
            p.prod_ntsl_bgn_ymd AS prodNtslBgnYmd,
            p.prod_ntsl_end_ymd AS prodNtslEndYmd,
            p.prod_curr_stcd AS prodCurrStcd
        FROM tb_product p
        WHERE 1=1
        <if test="searchParams.prodTyCd != null and searchParams.prodTyCd != ''">
            AND p.prod_ty_cd = #{searchParams.prodTyCd}
        </if>
        <if test="searchParams.prodCurrStcd != null and searchParams.prodCurrStcd != ''">
            <if test="searchParams.prodCurrStcd != 'all'">
                AND p.prod_curr_stcd = #{searchParams.prodCurrStcd}
            </if>
        </if>
        <if test="searchParams.prodPayTyCd != null and searchParams.prodPayTyCd != ''">
            AND p.prod_pay_ty_cd = #{searchParams.prodPayTyCd}
        </if>
        <if test="searchParams.prodNm != null and searchParams.prodNm != ''">
            <bind name="prodNmPattern" value="'%' + searchParams.prodNm + '%'"/>
            AND p.prod_nm LIKE #{prodNmPattern}
        </if>
        <if test="searchParams.prodNtslBgnYmdRange != null">
            AND p.prod_ntsl_bgn_ymd BETWEEN #{searchParams.prodNtslBgnYmdRange[0]} AND #{searchParams.prodNtslBgnYmdRange[1]}
        </if>
        <if test="searchParams.prodNtslEndYmdRange != null">
            AND p.prod_ntsl_end_ymd BETWEEN #{searchParams.prodNtslEndYmdRange[0]} AND #{searchParams.prodNtslEndYmdRange[1]}
        </if>
    </select>

    <!-- 컬럼명으로 정렬 -->
    <select id="getProductsSorted" resultType="productDTO">
        SELECT
            p.prod_sn AS prodSn,
            p.prod_nm AS prodNm,
            p.prod_instl_amt_min AS prodInstlAmtMin,
            p.prod_instl_amt_max AS prodInstlAmtMax,
            p.prod_cd AS prodCd,
            p.prod_ty_cd AS prodTyCd,
            p.prod_pay_ty_cd AS prodPayTyCd,
            p.prod_int_tax_ty_cd AS prodIntTaxTyCd,
            p.prod_air_min AS prodAirMin,
            p.prod_air_max AS prodAirMax,
            p.prod_ntsl_bgn_ymd AS prodNtslBgnYmd,
            p.prod_ntsl_end_ymd AS prodNtslEndYmd,
            p.prod_curr_stcd AS prodCurrStcd
        FROM tb_product
        ORDER BY
        ${sortColumn} ${sortDirection}
    </select>

    <!-- 상품 등록 -->
    <insert id="insertProduct" parameterType="productDTO">
        INSERT INTO tb_product (
        prod_nm,             -- 상품명
        prod_instl_amt_min,  -- 최소 가입금액
        prod_instl_amt_max,  -- 최대 가입금액
        prod_create_at,      -- 생성일
        user_id,             -- 담당자 ID
        prod_cd,             -- 상품 코드
        prod_ty_cd,          -- 상품 유형 코드
        prod_sbstg_ty_cd,    -- 가입 대상 코드
        prod_pay_ty_cd,      -- 납입 주기 코드
        prod_air_min,        -- 최소 적용이율
        prod_air_max,        -- 최대 적용이율
        prod_air_bgn_ymd,    -- 적용 시작일
        prod_air_end_ymd,    -- 적용 종료일
        prod_int_tax_ty_cd,  -- 이자 과세 구분 코드
        prod_curr_stcd,      -- 현재 상태 코드
        prod_ntsl_bgn_ymd,   -- 판매 시작일
        prod_ntsl_end_ymd    -- 판매 종료일
        )
        VALUES (
        #{dto.prodNm},
        #{dto.prodInstlAmtMin},
        #{dto.prodInstlAmtMax},
        NOW(),              -- 생성일 현재 시각
        #{dto.userId},
        #{dto.prodCd},
        #{dto.prodTyCd},
        #{dto.prodSbstgTyCd},
        #{dto.prodPayTyCd},
        #{dto.prodAirMin},
        #{dto.prodAirMax},
        #{dto.prodAirBgnYmd},
        #{dto.prodAirEndYmd},
        #{dto.prodIntTaxTyCd},
        #{dto.prodCurrStcd},
        #{dto.prodNtslBgnYmd},
        #{dto.prodNtslEndYmd}
        )
    </insert>

    <!-- 상품 개수 구하기 -->
    <select id="findCdSizeByName" parameterType="String" resultType="int">
        SELECT COUNT(*)
        FROM tb_product
        WHERE prod_cd LIKE CONCAT(#{keyword}, '%')
    </select>

    <!-- 상품 정보 수정 -->
    <update id="updateProduct" parameterType="com.team.financial_project.dto.ProductDTO">
        <!-- 기존 데이터를 tb_prod_hist 테이블에 추가 -->
        INSERT INTO tb_prod_hist (
        hist_id,
        prod_sn,
        user_id,
        hist_prod_air_min,
        hist_prod_air_max,
        hist_prod_air_bgn_ymd,
        hist_prod_air_end_ymd,
        hist_create_at
        )
        SELECT
        nextval('tb_prod_hist_hist_id_seq'),
        prod_sn,
        #{userId},
        prod_air_min,
        prod_air_max,
        prod_air_bgn_ymd,
        prod_air_end_ymd,
        now()
        FROM tb_product
        WHERE prod_sn = #{dto.prodSn};

        <!-- tb_product 테이블에 데이터 업데이트 -->
        UPDATE tb_product
        SET
        prod_air_min = COALESCE(#{dto.prodAirMin, jdbcType=NUMERIC}, prod_air_min),
        prod_air_max = COALESCE(#{dto.prodAirMax, jdbcType=BIGINT}, prod_air_max),
        prod_air_bgn_ymd = COALESCE(#{dto.prodAirBgnYmd, jdbcType=VARCHAR}, prod_air_bgn_ymd),
        prod_air_end_ymd = COALESCE(#{dto.prodAirEndYmd, jdbcType=VARCHAR}, prod_air_end_ymd),
        prod_ntsl_bgn_ymd = COALESCE(#{dto.prodNtslBgnYmd, jdbcType=VARCHAR}, prod_ntsl_bgn_ymd),
        prod_ntsl_end_ymd = COALESCE(#{dto.prodNtslEndYmd, jdbcType=VARCHAR}, prod_ntsl_end_ymd),
        prod_update_at = now()
        WHERE prod_sn = #{dto.prodSn};
    </update>

    <!-- 상품 상태 자동 변경 -->
    <update id="updateProductStatus">
        UPDATE tb_product
        SET prod_curr_stcd =
        <choose>
            <when test="CURRENT_DATE &lt; prod_ntsl_bgn_ymd">
                '0'  <!-- 판매대기 -->
            </when>
            <when test="CURRENT_DATE BETWEEN prod_ntsl_bgn_ymd AND prod_ntsl_end_ymd">
                '1'  <!-- 판매중 -->
            </when>
            <when test="CURRENT_DATE &gt; prod_ntsl_end_ymd">
                '2'  <!-- 판매종료 -->
            </when>
        </choose>
        WHERE prod_ntsl_bgn_ymd IS NOT NULL
        AND prod_ntsl_end_ymd IS NOT NULL;
    </update>

    <!-- 상품 삭제 : 상품상태코드 변경 -->
    <update id="deleteProduct" parameterType="java.math.BigDecimal">
        UPDATE tb_product
        SET prod_curr_stcd = 2,
            prod_ntsl_end_ymd = CURRENT_DATE, -- 오늘 날짜를 yyyy-MM-dd 형식으로 설정
            prod_update_at = now() -- 현재 시각으로 업데이트
        WHERE prod_sn = #{prodSn}
    </update>

    <!-- 매출 조회; 디폴트: 이번달 매출 조회 -->
    <!-- 적금 매출 조회 -->
    <select id="findSavingsSales" parameterType="map" resultType="map">
        SELECT
        TO_CHAR(SAVG_STRT_DT, 'YYYY-MM') AS sale_month,
        COUNT(SAVG_DS_SN) AS total_design_count,
        SUM(SAVG_TOT_DPST_AMT) AS total_sales_amount
        FROM
        TB_PROD_DSGN_SAVG
        WHERE
        SAVG_STRT_DT BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        TO_CHAR(SAVG_STRT_DT, 'YYYY-MM')
        ORDER BY
        sale_month;
    </select>

    <!-- 적금 상위 2개 상품 조회 -->
    <select id="rankedSavingsTop2" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.savg_tot_dpst_amt) AS total_deposit_amount,
        COUNT(s.savg_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_savg s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.savg_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 대출 매출 조회 -->
    <select id="findLoanSales" parameterType="map" resultType="map">
        SELECT
        TO_CHAR(LOAN_STRT_DT, 'YYYY-MM') AS sale_month,
        COUNT(LOAN_DS_SN) AS total_design_count,
        SUM(LOAN_AMT) AS total_sales_amount
        FROM
        TB_PROD_DSGN_LOAN
        WHERE
        LOAN_STRT_DT BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        TO_CHAR(LOAN_STRT_DT, 'YYYY-MM')
        ORDER BY
        sale_month;
    </select>

    <!-- 대출 상위 2개 상품 조회 -->
    <select id="rankedLoansTop2" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.loan_amt) AS total_deposit_amount,
        COUNT(s.loan_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_loan s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.loan_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 예금 매출 조회 -->
    <select id="findDepositSales" parameterType="map" resultType="map">
        SELECT
        TO_CHAR(DPST_STRT_DT, 'YYYY-MM') AS sale_month,
        COUNT(DPST_DS_SN) AS total_design_count,
        SUM(DPST_AMT) AS total_sales_amount
        FROM
        TB_PROD_DSGN_DPST
        WHERE
        DPST_STRT_DT BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        TO_CHAR(DPST_STRT_DT, 'YYYY-MM')
        ORDER BY
        sale_month;
    </select>

    <!-- 예금 상위 2개 상품 조회 -->
    <select id="rankedDepositTop2" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.dpst_amt) AS total_deposit_amount,
        COUNT(s.dpst_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_dpst s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.dpst_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 목돈 매출 조회 -->
    <select id="findLumpSumSales" parameterType="map" resultType="map">
        SELECT
        TO_CHAR(ACML_STRT_DT, 'YYYY-MM') AS sale_month,
        COUNT(ACML_DS_SN) AS total_design_count,
        SUM(ACML_TOT_DPST_AMT) AS total_sales_amount
        FROM
        TB_PROD_DSGN_ACML
        WHERE
        ACML_STRT_DT BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        TO_CHAR(ACML_STRT_DT, 'YYYY-MM')
        ORDER BY
        sale_month;
    </select>

    <!-- 목돈 상위 2개 상품 조회 -->
    <select id="rankedLumpSumTop2" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.acml_tot_dpst_amt) AS total_deposit_amount,
        COUNT(s.acml_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_acml s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.acml_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 매출 조회 - 조건 검색-->
    <select id="findSalesData" parameterType="map" resultType="map">
        SELECT
        CASE
        WHEN s.dsgn_ds_ty_cd = '1' THEN '적금'
        WHEN s.dsgn_ds_ty_cd = '2' THEN '목돈'
        WHEN s.dsgn_ds_ty_cd = '3' THEN '예금'
        WHEN s.dsgn_ds_ty_cd = '4' THEN '대출'
        END AS dsgn_ds_ty,
        COUNT(s.dsgn_sn) AS total_design_count,
        SUM(
        CASE
        WHEN s.dsgn_ds_ty_cd = '1' THEN savg.savg_tot_dpst_amt
        WHEN s.dsgn_ds_ty_cd = '2' THEN acml.acml_tot_dpst_amt
        WHEN s.dsgn_ds_ty_cd = '3' THEN d.dpst_amt
        WHEN s.dsgn_ds_ty_cd = '4' THEN loan.loan_amt
        END
        ) AS total_sales_amount
        FROM tb_custprod_dsgn s
        LEFT JOIN tb_prod_dsgn_savg savg ON s.dsgn_sn = savg.dsgn_sn AND s.dsgn_ds_ty_cd = '1'
        LEFT JOIN tb_prod_dsgn_acml acml ON s.dsgn_sn = acml.dsgn_sn AND s.dsgn_ds_ty_cd = '2'
        LEFT JOIN tb_prod_dsgn_dpst d ON s.dsgn_sn = d.dsgn_sn AND s.dsgn_ds_ty_cd = '3'
        LEFT JOIN tb_prod_dsgn_loan loan ON s.dsgn_sn = loan.dsgn_sn AND s.dsgn_ds_ty_cd = '4'
        LEFT JOIN tb_product p ON s.prod_sn = p.prod_sn
        WHERE
        s.dsgn_create_at BETWEEN #{startOfMonth} AND #{endOfMonth}
        <if test="userId != null and userId != ''">
            AND s.user_id = #{userId}
        </if>
        <if test="dsgnDsTy != null and dsgnDsTy != ''">
            AND s.dsgn_ds_ty_cd = #{dsgnDsTy}
        </if>
        <if test="prodNm != null and prodNm != ''">
            AND p.prod_nm LIKE CONCAT('%', #{prodNm}, '%')
        </if>
        GROUP BY s.dsgn_ds_ty_cd
        ORDER BY total_sales_amount DESC;
    </select>

    <!-- 적금 -->
    <select id="rankedSavingsTop2ByConditions" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.savg_tot_dpst_amt) AS total_deposit_amount,
        COUNT(s.savg_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_savg s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.savg_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 대출 -->
    <select id="rankedLoansTop2ByConditions" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.loan_amt) AS total_deposit_amount,
        COUNT(s.loan_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_loan s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.loan_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 예금 -->
    <select id="rankedDepositTop2ByConditions" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.dpst_amt) AS total_deposit_amount,
        COUNT(s.dpst_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_dpst s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.dpst_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

    <!-- 목돈 -->
    <select id="rankedLumpSumTop2ByConditions" parameterType="map" resultType="map">
        SELECT
        p.prod_nm AS product_name,
        SUM(s.acml_tot_dpst_amt) AS total_deposit_amount,
        COUNT(s.acml_ds_sn) AS total_design_count
        FROM
        tb_prod_dsgn_acml s
        JOIN
        tb_custprod_dsgn cpd ON s.dsgn_sn = cpd.dsgn_sn
        JOIN
        tb_product p ON cpd.prod_sn = p.prod_sn
        WHERE
        s.acml_strt_dt BETWEEN #{startOfMonth} AND #{endOfMonth}
        GROUP BY
        p.prod_nm
        ORDER BY
        total_design_count DESC, total_deposit_amount DESC
        LIMIT 2;
    </select>

</mapper>
